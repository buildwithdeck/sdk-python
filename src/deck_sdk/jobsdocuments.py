"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from deck_sdk import errors, models, utils
from deck_sdk._hooks import HookContext
from deck_sdk.types import OptionalNullable, UNSET
from deck_sdk.utils import get_security_from_env
from deck_sdk.utils.unmarshal_json_response import unmarshal_json_response
from enum import Enum
from typing import Any, Mapping, Optional, Union


class ListAcceptEnum(str, Enum):
    APPLICATION_JSON = "application/json"
    TEXT_JSON = "text/json"


class JobsDocuments(BaseSDK):
    def list(
        self,
        *,
        job_guid: Optional[str] = None,
        access_token_request: Optional[
            Union[models.AccessTokenRequest, models.AccessTokenRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DocumentListResponse:
        r"""List documents

        Returns a list of documents available for the connection associated with the provided link token

        :param job_guid:
        :param access_token_request:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PostJobsDocumentsListRequest(
            job_guid=job_guid,
            access_token_request=utils.get_pydantic_model(
                access_token_request, Optional[models.AccessTokenRequest]
            ),
        )

        req = self._build_request(
            method="POST",
            path="/jobs/documents/list",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/json;q=1, text/json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.access_token_request,
                False,
                True,
                "json",
                Optional[models.AccessTokenRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="post_/jobs/documents/list",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DocumentListResponse, http_res)
        if utils.match_response(http_res, "200", "text/json"):
            return unmarshal_json_response(models.DocumentListResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.ErrorMessageResponseData, http_res
            )
            raise errors.ErrorMessageResponse(response_data, http_res)
        if utils.match_response(http_res, "400", "text/json"):
            response_data = unmarshal_json_response(
                errors.ErrorMessageResponseData, http_res
            )
            raise errors.ErrorMessageResponse(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)

    async def list_async(
        self,
        *,
        job_guid: Optional[str] = None,
        access_token_request: Optional[
            Union[models.AccessTokenRequest, models.AccessTokenRequestTypedDict]
        ] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.DocumentListResponse:
        r"""List documents

        Returns a list of documents available for the connection associated with the provided link token

        :param job_guid:
        :param access_token_request:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PostJobsDocumentsListRequest(
            job_guid=job_guid,
            access_token_request=utils.get_pydantic_model(
                access_token_request, Optional[models.AccessTokenRequest]
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/jobs/documents/list",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/json;q=1, text/json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.access_token_request,
                False,
                True,
                "json",
                Optional[models.AccessTokenRequest],
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="post_/jobs/documents/list",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.DocumentListResponse, http_res)
        if utils.match_response(http_res, "200", "text/json"):
            return unmarshal_json_response(models.DocumentListResponse, http_res)
        if utils.match_response(http_res, "400", "application/json"):
            response_data = unmarshal_json_response(
                errors.ErrorMessageResponseData, http_res
            )
            raise errors.ErrorMessageResponse(response_data, http_res)
        if utils.match_response(http_res, "400", "text/json"):
            response_data = unmarshal_json_response(
                errors.ErrorMessageResponseData, http_res
            )
            raise errors.ErrorMessageResponse(response_data, http_res)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError("API error occurred", http_res, http_res_text)

        raise errors.APIError("Unexpected response received", http_res)
