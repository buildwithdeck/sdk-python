"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from deck_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class LinkSourcesRequestTypedDict(TypedDict):
    link_token: str
    r"""The link_token, must be provided when calling Link endpoints, for identifying the Link session."""
    source_id: NotRequired[Nullable[str]]
    r"""The specific source identifier to find. If left to NULL, a list of the 15 most common data sources is returned. If specified, the search argument will be ignored."""
    search: NotRequired[Nullable[str]]
    r"""A search term for filtering the list by data source name. If left to NULL or empty, a list of the 15 most common data sources is returned."""


class LinkSourcesRequest(BaseModel):
    link_token: str
    r"""The link_token, must be provided when calling Link endpoints, for identifying the Link session."""

    source_id: OptionalNullable[str] = UNSET
    r"""The specific source identifier to find. If left to NULL, a list of the 15 most common data sources is returned. If specified, the search argument will be ignored."""

    search: OptionalNullable[str] = UNSET
    r"""A search term for filtering the list by data source name. If left to NULL or empty, a list of the 15 most common data sources is returned."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["source_id", "search"]
        nullable_fields = ["source_id", "search"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
