"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .linktokencreaterequestupdatemodeenum import LinkTokenCreateRequestUpdateModeEnum
from deck_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class LinkTokenCreateRequestLanguage(str, Enum):
    r"""The language that Link should be displayed in."""

    EN = "EN"
    ES = "ES"
    FR = "FR"
    DE = "DE"
    IT = "IT"
    PT = "PT"
    NL = "NL"
    PL = "PL"
    SV = "SV"
    DA = "DA"
    NO = "NO"
    ET = "ET"
    LT = "LT"
    LV = "LV"
    RO = "RO"


class LinkTokenCreateRequestBetaSourceStatus(str, Enum):
    r"""To control which sources to be shown regarding their beta status"""

    LIVE_AND_BETA = "LiveAndBeta"
    ONLY_LIVE = "OnlyLive"
    ONLY_BETA = "OnlyBeta"


class UpdateTypedDict(TypedDict):
    r"""Used for launching Link in update or refresh mode"""

    access_token: str
    r"""The `access_token` associated with the existing Connection to update"""
    mode: LinkTokenCreateRequestUpdateModeEnum
    r"""Set which mode you want to use between Update and Refresh.
    Update mode will ask to enter the password, for updating it.
    Refresh mode will re-use existing known credentials and will only let the user interact with the MFA step during sign-in.
    """


class Update(BaseModel):
    r"""Used for launching Link in update or refresh mode"""

    access_token: str
    r"""The `access_token` associated with the existing Connection to update"""

    mode: LinkTokenCreateRequestUpdateModeEnum
    r"""Set which mode you want to use between Update and Refresh.
    Update mode will ask to enter the password, for updating it.
    Refresh mode will re-use existing known credentials and will only let the user interact with the MFA step during sign-in.
    """


class ParsingMethod(str, Enum):
    r"""Choose the type of parsing needed for the connection"""

    PDF_ONLY = "PdfOnly"
    BASIC = "Basic"
    FULL_SUSTAINABILITY = "FullSustainability"
    NONE = "None"


class LinkTokenCreateRequestTypedDict(TypedDict):
    language: NotRequired[Nullable[LinkTokenCreateRequestLanguage]]
    r"""The language that Link should be displayed in."""
    countries: NotRequired[Nullable[List[str]]]
    r"""Specify an array of Datadeck-supported country codes using the ISO-3166-1 alpha-2 country code standard. Sources from all listed countries will be shown."""
    source_ids: NotRequired[Nullable[List[str]]]
    r"""You can specify exactly the sources to be shown in Link by providing a list of source ids."""
    source_types: NotRequired[Nullable[List[str]]]
    r"""You can limit the sources to be shown in Link by specifying which source types to be shown in Link."""
    beta_source_status: NotRequired[Nullable[LinkTokenCreateRequestBetaSourceStatus]]
    r"""To control which sources to be shown regarding their beta status"""
    update: NotRequired[Nullable[UpdateTypedDict]]
    r"""Used for launching Link in update or refresh mode"""
    webhook_url: NotRequired[Nullable[str]]
    r"""The webhook URL to receive update events."""
    auto_refresh: NotRequired[Nullable[bool]]
    r"""If true, the Link session will automatically refresh the data."""
    parsing_method: NotRequired[Nullable[ParsingMethod]]
    r"""Choose the type of parsing needed for the connection"""
    latest_invoice_only: NotRequired[Nullable[bool]]
    r"""Specifies whether to collect only the latest invoice data or all available invoices"""


class LinkTokenCreateRequest(BaseModel):
    language: OptionalNullable[LinkTokenCreateRequestLanguage] = UNSET
    r"""The language that Link should be displayed in."""

    countries: OptionalNullable[List[str]] = UNSET
    r"""Specify an array of Datadeck-supported country codes using the ISO-3166-1 alpha-2 country code standard. Sources from all listed countries will be shown."""

    source_ids: OptionalNullable[List[str]] = UNSET
    r"""You can specify exactly the sources to be shown in Link by providing a list of source ids."""

    source_types: OptionalNullable[List[str]] = UNSET
    r"""You can limit the sources to be shown in Link by specifying which source types to be shown in Link."""

    beta_source_status: OptionalNullable[LinkTokenCreateRequestBetaSourceStatus] = UNSET
    r"""To control which sources to be shown regarding their beta status"""

    update: OptionalNullable[Update] = UNSET
    r"""Used for launching Link in update or refresh mode"""

    webhook_url: OptionalNullable[str] = UNSET
    r"""The webhook URL to receive update events."""

    auto_refresh: OptionalNullable[bool] = UNSET
    r"""If true, the Link session will automatically refresh the data."""

    parsing_method: OptionalNullable[ParsingMethod] = UNSET
    r"""Choose the type of parsing needed for the connection"""

    latest_invoice_only: OptionalNullable[bool] = UNSET
    r"""Specifies whether to collect only the latest invoice data or all available invoices"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "language",
            "countries",
            "source_ids",
            "source_types",
            "beta_source_status",
            "update",
            "webhook_url",
            "auto_refresh",
            "parsing_method",
            "latest_invoice_only",
        ]
        nullable_fields = [
            "language",
            "countries",
            "source_ids",
            "source_types",
            "beta_source_status",
            "update",
            "webhook_url",
            "auto_refresh",
            "parsing_method",
            "latest_invoice_only",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
