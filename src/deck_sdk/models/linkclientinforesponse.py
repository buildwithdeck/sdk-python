"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .accountselectmodeenum import AccountSelectModeEnum
from .languageenum import LanguageEnum
from .linksourcesresponsesource import (
    LinkSourcesResponseSource,
    LinkSourcesResponseSourceTypedDict,
)
from deck_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class UpdateModeTypedDict(TypedDict):
    r"""Information about the source, if using Link in Update mode."""

    source: LinkSourcesResponseSourceTypedDict
    r"""When using Link in Update mode, this contains information about the original data source for which we are updating the connection."""


class UpdateMode(BaseModel):
    r"""Information about the source, if using Link in Update mode."""

    source: LinkSourcesResponseSource
    r"""When using Link in Update mode, this contains information about the original data source for which we are updating the connection."""


class Mode(str, Enum):
    r"""Indicates the mode in which the Link widget should run"""

    NORMAL = "Normal"
    UPDATE_CREDENTIALS = "UpdateCredentials"
    REFRESH = "Refresh"
    UPDATE_ACCOUNT_SELECTION = "UpdateAccountSelection"


class LinkClientInfoResponseTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""Client name to display. If the client did not set his name yet, this property will be NULL and a default name should be displayed in that case."""
    image_url: NotRequired[str]
    r"""Client logo URL to display."""
    language: NotRequired[LanguageEnum]
    r"""The language that Link should be displayed in."""
    update_mode: NotRequired[Nullable[UpdateModeTypedDict]]
    r"""Information about the source, if using Link in Update mode."""
    terms_of_use_url: NotRequired[Nullable[str]]
    r"""Your terms of use to be accepted by the end-user"""
    privacy_policy_url: NotRequired[Nullable[str]]
    r"""Your privacy policy to be accepted by the end-user"""
    mode: NotRequired[Nullable[Mode]]
    r"""Indicates the mode in which the Link widget should run"""
    account_select_mode: NotRequired[AccountSelectModeEnum]
    r"""Indicates the mode to select accounts"""
    allow_document_upload: NotRequired[bool]
    r"""Indicates if the Link User should be able to upload documents by himself in Link"""
    show_step_consent: NotRequired[bool]
    r"""Indicates if link widget should show the consent screen"""
    show_step_add_source: NotRequired[bool]
    r"""Indicates if link widget should show the add source screen"""
    show_step_select_account: NotRequired[bool]
    r"""Indicates if link widget should show the account selection screen"""
    show_step_add_account: NotRequired[bool]
    r"""Indicates if link widget should show the add account screen"""


class LinkClientInfoResponse(BaseModel):
    name: OptionalNullable[str] = UNSET
    r"""Client name to display. If the client did not set his name yet, this property will be NULL and a default name should be displayed in that case."""

    image_url: Optional[str] = None
    r"""Client logo URL to display."""

    language: Optional[LanguageEnum] = None
    r"""The language that Link should be displayed in."""

    update_mode: OptionalNullable[UpdateMode] = UNSET
    r"""Information about the source, if using Link in Update mode."""

    terms_of_use_url: OptionalNullable[str] = UNSET
    r"""Your terms of use to be accepted by the end-user"""

    privacy_policy_url: OptionalNullable[str] = UNSET
    r"""Your privacy policy to be accepted by the end-user"""

    mode: OptionalNullable[Mode] = UNSET
    r"""Indicates the mode in which the Link widget should run"""

    account_select_mode: Optional[AccountSelectModeEnum] = None
    r"""Indicates the mode to select accounts"""

    allow_document_upload: Optional[bool] = None
    r"""Indicates if the Link User should be able to upload documents by himself in Link"""

    show_step_consent: Optional[bool] = None
    r"""Indicates if link widget should show the consent screen"""

    show_step_add_source: Optional[bool] = None
    r"""Indicates if link widget should show the add source screen"""

    show_step_select_account: Optional[bool] = None
    r"""Indicates if link widget should show the account selection screen"""

    show_step_add_account: Optional[bool] = None
    r"""Indicates if link widget should show the add account screen"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "image_url",
            "language",
            "update_mode",
            "terms_of_use_url",
            "privacy_policy_url",
            "mode",
            "account_select_mode",
            "allow_document_upload",
            "show_step_consent",
            "show_step_add_source",
            "show_step_select_account",
            "show_step_add_account",
        ]
        nullable_fields = [
            "name",
            "update_mode",
            "terms_of_use_url",
            "privacy_policy_url",
            "mode",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
