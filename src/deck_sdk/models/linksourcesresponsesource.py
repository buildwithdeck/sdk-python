"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .linksourcesresponsesourcefield import (
    LinkSourcesResponseSourceField,
    LinkSourcesResponseSourceFieldTypedDict,
)
from deck_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class LinkSourcesResponseSourceTypedDict(TypedDict):
    source_id: NotRequired[str]
    r"""Unique identifier of the source with Datadeck."""
    name: NotRequired[str]
    r"""Name of the data source."""
    logo_url: NotRequired[Nullable[str]]
    r"""Url to display the data source logo, when available (can be null)."""
    country: NotRequired[Nullable[str]]
    r"""Country code of the data source in ISO 3166 format (2 characters)."""
    website: NotRequired[Nullable[str]]
    r"""Website of the data source, useful for resetting a password."""
    fields: NotRequired[List[LinkSourcesResponseSourceFieldTypedDict]]
    r"""The required fields to be displayed to the user for entering his credentials. In Update mode (for changing a password), the Username value of the connection being updated will also be provided, to be displayed in read-only."""


class LinkSourcesResponseSource(BaseModel):
    source_id: Optional[str] = None
    r"""Unique identifier of the source with Datadeck."""

    name: Optional[str] = None
    r"""Name of the data source."""

    logo_url: OptionalNullable[str] = UNSET
    r"""Url to display the data source logo, when available (can be null)."""

    country: OptionalNullable[str] = UNSET
    r"""Country code of the data source in ISO 3166 format (2 characters)."""

    website: OptionalNullable[str] = UNSET
    r"""Website of the data source, useful for resetting a password."""

    fields: Optional[List[LinkSourcesResponseSourceField]] = None
    r"""The required fields to be displayed to the user for entering his credentials. In Update mode (for changing a password), the Username value of the connection being updated will also be provided, to be displayed in read-only."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "source_id",
            "name",
            "logo_url",
            "country",
            "website",
            "fields",
        ]
        nullable_fields = ["logo_url", "country", "website"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
